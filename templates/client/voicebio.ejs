<script>
    $('#file-upload').change(function () {
        var i = $(this).prev('label').clone();
        var file = $('#file-upload')[0].files[0].name;
        $(this).prev('label').text(file);
    });

</script>
<script src="/assets/js/vendor/forms/validation/validate.min.js"></script>
<script>
    const accessToken = JSON.parse('<%- JSON.stringify(accessToken) %>');
    const API_URL2 = JSON.parse('<%- JSON.stringify(API_URL2) %>');

    const FormValidation = function () {

        const _componentValidation = function () {
            if (!$().validate) {
                console.warn('Warning - validate.min.js is not loaded.');
                return;
            }

            $.validator.addMethod("phoneVN", function (phone_number, element) {
                phone_number = phone_number.replace(/\s+/g, "");
                return this.optional(element) || phone_number.length >= 10 &&
                    phone_number.match(/^(0|\+84|\(84\))?[1-9][0-9]{8}$/);
            }, "Số điện thoại sai định dạng!");

            // Initialize
            const validator = $('.form-validate-jquery').validate({
                ignore: 'input[type=hidden], .select2-search__field', // ignore hidden fields
                errorClass: 'validation-invalid-label',
                successClass: 'validation-valid-label',
                validClass: 'validation-valid-label',
                highlight: function (element, errorClass) {
                    $(element).removeClass(errorClass);
                },
                unhighlight: function (element, errorClass) {
                    $(element).removeClass(errorClass);
                },
                success: function (label) {
                    label.addClass('validation-valid-label').text('Hợp lệ');
                },

                // Different components require proper error label placement
                errorPlacement: function (error, element) {

                    // Input with icons and Select2
                    if (element.hasClass('select2-hidden-accessible')) {
                        error.appendTo(element.parent());
                    }

                    // Input group, form checks and custom controls
                    else if (element.parents().hasClass('form-control-feedback') || element.parents().hasClass('form-check') || element.parents().hasClass('input-group')) {
                        error.appendTo(element.parent().parent());
                    }

                    // Other elements
                    else {
                        error.insertAfter(element);
                    }
                },
                rules: {
                    customer_phone: {
                        phoneVN: true
                    }
                },
                messages: {
                    customer_name: {
                        required: 'Yêu cầu nhập thông tin họ tên'
                    },
                    customer_phone: {
                        required: 'Yêu cầu số điện thoại khách hàng'
                    },
                    customer_rank: {
                        required: 'Yêu cầu nhập hạng khách hàng'
                    }
                }
            });

            // Reset form
            $('#reset').on('click', function () {
                validator.resetForm();

                // Clear data
                $("input[name='customer_name']").val('');
                $("input[name='customer_phone']").val('');
                $("select[name='customer_rank']").val([]);
                $("textarea[name='customer_note']").val('');
            });
        };

        return { init: function () { _componentValidation(); } }
    }();

    document.addEventListener('DOMContentLoaded', function () {
        FormValidation.init();
        $("select[name='customer_rank']").val([]);
    });

</script>

<div class="card">

    <div class="card-body">
        <form action="#" id="registerForm" class="form-validate-jquery" novalidate="novalidate">
            <fieldset class="mb-3">
                <legend class="fs-lg fw-bold border-bottom pb-2 mb-3 text-primary text-uppercase">Ghi âm giọng nói
                </legend>

                <div class="text-result"></div>

                <div class="mb-3">
                    <label class="form-label">Khách hàng<span class="text-danger">*</span></label>
                    <input type="hidden" name="customer_phone"
                        value="<%= (userData && userData.phone) ? userData.phone : '' %>" />
                    <input type="text" class="form-control" name="customer_name" placeholder="Nhập họ tên khách hàng"
                        value="<%= (userData && userData.name) ? userData.name : '' %>" readonly>
                </div>

            </fieldset>

            <!-- Timeline -->
            <div class="timeline timeline-center">
                <div class="timeline-container">

                    <% for(let i=1; i<=listText.length; i++ ) { %>
                        <div class="timeline-row timeline-row-start mb-4">

                            <div class="timeline-time" style="background-color: unset;">
                                <div class="d-flex align-items-center">
                                    <a href="javascript:void(0)" id="record_btn_<%= i %>"
                                        class="badge bg-secondary rounded-pill p-1 me-3" data-index="<%= i %>"
                                        onclick="recordAction(this)">
                                        <i class="ph-microphone ph-2x"></i>
                                    </a>

                                    <!-- <div>
                                    <label for="file-upload" class="btn btn-primary">
                                        <i class="ph-upload-simple me-3"></i> Upload file ghi âm <%= i %>
                                    </label>
                                    <input id="file-upload" name='upload_cont_img' type="file" style="display:none;">
                                </div> -->

                                    <audio id="audio_player_<%= i %>" controls></audio>
                                </div>
                            </div>

                            <div class="text-end" style="padding-top: 14px;">
                                <h5 class="card-title mb-1">Ghi âm câu <%= i %>
                                </h5>
                                <input type="hidden" name="text_input_<%= i %>" value="<%= listText[i - 1] %>" />
                                <p class="">"<%= listText[i - 1] %>"</p>
                            </div>
                        </div>
                        <% } %>
                </div>
            </div>
            <!-- /timeline -->

            <div class="text-end mt-5">
                <a href="javascript:void(0)" id="reset" class="btn btn-light text-uppercase fw-semibold me-2">Hủy</a>
                <button type="submit" class="btn btn-primary fw-semibold text-uppercase">Đăng ký</button>
            </div>
        </form>
    </div>

</div>

<script>
    async function afterRecording(formData, index) {
        const headers = {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Authorization': `Bearer ${accessToken}`,
        };
        const res = await axios.post(API_URL2 + '/api/voicebio/enroll/add_file', formData, { headers });
        console.log(res); return;
        if (!res || !res.data || !res.data.message) {
            _componentNoty("Lỗi không xác định", "error");
            return;
        }
        const { status, message, nextIndex, nextText, fileName } = res.data;
        if (status) {
            // Verify thành công, tiếp tục
            $(`#verify_icon_${index}`).removeClass('ph-x-circle text-danger').addClass('ph-check-circle text-success');
            $(`#record_btn_${index}`).remove();

            // Lưu giữ liệu
            if (nextText) $(`input[data-item='text_${nextIndex}']`).val(nextText);
            if (fileName) $(`input[name="customer_filename_${index}"]`).val(fileName);
        } else {
            $(`#verify_icon_${index}`).removeClass('ph-check-circle text-success').addClass('ph-x-circle text-danger');
        }

        _componentNoty(message, (status ? 'success' : 'error'));
        return;
    }

    const mediaRecorder = [];

    function startRecording(index) {
        const audioPlayer = $("audio").filter(`[data-item='audio_player_${index}']`);

        const chunks = [];
        navigator.mediaDevices.getUserMedia({ audio: true })
            .then(stream => {
                mediaRecorder[index] = new MediaRecorder(stream);
                mediaRecorder[index].ondataavailable = function (event) {
                    chunks.push(event.data);
                }

                mediaRecorder[index].onstop = async function () {
                    const audioBlob = new Blob(chunks, { type: 'audio/wav' });
                    const audioURL = URL.createObjectURL(audioBlob);
                    $(`#audio_player_${index}`).attr('src', audioURL);

                    const formData = new FormData();
                    const user_code = $("input[name='customer_phone']").val();
                    formData.append('file', audioBlob);
                    formData.append('user_code', user_code);
                    formData.append('text', $(`input[name='text_input_${index}']`).val());

                    return afterRecording(formData, index);
                }

                mediaRecorder[index].start();
            })
            .catch(error => {
                console.error('Error accessing microphone:', error);
                _componentNoty("Lỗi không xác định", "error");
            });
    }

    function stopRecording(index) {
        mediaRecorder[index].stop();
    }

    const recordAction = (ele) => {
        const index = $(ele).data('index');
        if ($("input[name='customer_name']").val() == '') {
            _componentNoty("Dữ liệu thông tin khách hàng bị thiếu", "error");
            return;
        }

        let isRecording = $(ele).hasClass("recording");
        if (!isRecording) {
            $(ele).addClass("recording bg-danger");
            startRecording(index);

        } else {
            $(ele).removeClass("recording bg-danger");
            stopRecording(index);
        }
    }

    const registerAction = async (ele) => {
        const customer_name = $(`input[name="customer_name"]`);
        const customer_phone = $(`input[name="customer_phone"]`);
        const customer_rank = $(`input[name="customer_rank"]`);
        const customer_note = $(`textarea[name="customer_note"]`);
        const customer_filename_1 = $(`input[name="customer_filename_1"]`);
        const customer_filename_2 = $(`input[name="customer_filename_2"]`);
        const customer_filename_3 = $(`input[name="customer_filename_3"]`);

        if (customer_name.val() == '') {
            _componentNoty("Vui lòng nhập tên khách hàng", "error");
            customer_name.focus();
            return;
        }

        if (customer_phone.val() == '') {
            _componentNoty("Vui lòng nhập số điện thoại khách hàng", "error");
            customer_phone.focus();
            return;
        }

        if (customer_rank.val() == '') {
            _componentNoty("Vui lòng nhập hạng khách hàng", "error");
            customer_rank.focus();
            return;
        }

        if (customer_note.val() == '') {
            _componentNoty("Vui lòng nhập ghi chú", "error");
            customer_note.focus();
            return;
        }

        if (customer_filename_1.val() == '' ||
            customer_filename_2.val() == '' ||
            customer_filename_3.val() == '') {
            _componentNoty("Vui lòng xác thực tất cả các thông tin đăng ký", "error");
            return;
        }


        const res = await axios.post('/api/register', {
            customer_name: customer_name.val(),
            customer_phone: customer_phone.val(),
            customer_rank: customer_rank.val(),
            customer_note: customer_note.val(),
            customer_filename_1: customer_filename_1.val(),
            customer_filename_2: customer_filename_2.val(),
            customer_filename_3: customer_filename_3.val()
        });

        if (!res || !res.data) {
            _componentNoty("Lỗi không xác định", "error");
            return;
        }
        const { status, message } = res.data;

        if (typeof status == "undefined" || !message) {
            _componentNoty("Lỗi không xác định", "error");
            return;
        }

        if (!status) _componentNoty(message, "error");

        _componentNoty("Đăng ký thành công, trang sẽ tự động làm mới sau 2s", "success");
        setTimeout(function () {
            window.location.reload();
        }, 2000);
        return;
    }
</script>