<script>
    const accessToken = JSON.parse('<%- JSON.stringify(accessToken) %>');
    const API_URL = JSON.parse('<%- JSON.stringify(API_URL) %>');
    const API_URL2 = JSON.parse('<%- JSON.stringify(API_URL2) %>');
    const listText = JSON.parse('<%- JSON.stringify(listText) %>');
</script>

<div class="card">

    <div class="card-body">
        <form action="#" id="registerForm">
            <fieldset class="mb-3">
                <legend class="fs-lg fw-bold border-bottom pb-2 mb-3 text-primary text-uppercase">Ghi âm giọng nói
                </legend>

                <div class="mb-3">
                    <label class="form-label">Khách hàng<span class="text-danger">*</span></label>
                    <input type="hidden" name="customer_phone"
                        value="<%= (userData && userData.phone) ? userData.phone : '' %>" />
                    <input type="text" class="form-control" name="customer_name" placeholder="Nhập họ tên khách hàng"
                        value="<%= (userData && userData.name) ? userData.name : '' %>" readonly>
                </div>

            </fieldset>

            <!-- Timeline -->
            <div class="timeline timeline-center">
                <div class="timeline-container">

                    <% for(let i=1; i<=listText.length; i++ ) { %>
                        <div class="timeline-row timeline-row-start mb-4">

                            <div class="timeline-time" style="background-color: unset;">
                                <div class="d-flex align-items-center">
                                    <div id="record_area_<%= i %>">
                                        <div class="d-flex align-items-center">
                                            <a href="javascript:void(0)" class="badge bg-secondary rounded-pill p-1 me-3"
                                                data-index="<%= i %>" onclick="recordAction(this)">
                                                <i class="ph-microphone ph-2x"></i>
                                            </a>

                                            <div>
                                                <label for="file-upload" class="btn btn-primary">
                                                    <i class="ph-upload-simple me-3"></i> Upload file ghi âm <%= i %>
                                                </label>
                                                <input id="file-upload" name='upload_cont_img' type="file" style="display:none;">
                                            </div>
                                        </div>
                                    </div>


                                    <div id="audio_area_<%= i %>" class="w-100" style="display: none;">
                                        <input type="hidden" name="audio_result_<%= i %>" />
                                        <div class="d-flex align-items-center mb-1">
                                            <audio id="audio_player_<%= i %>" controls></audio>
                                            <i
                                                class="ph-check-circle result_icon text-success rounded-pill p-0 mx-2"></i>
                                            <a href="javascript:void(0)" class="mx-5 text-under"
                                                onclick="retryAction('<%= i %>')"><u>Ghi lại</u></a>
                                        </div>
                                        <span class="result_text text-success"></span>
                                    </div>

                                </div>
                            </div>

                            <div class="text-end" style="padding-top: 14px;">
                                <h5 class="card-title mb-1">Ghi âm câu <%= i %>
                                </h5>
                                <input type="hidden" name="text_input_<%= i %>" value="<%= listText[i - 1] %>" />
                                <p class="">"<%= listText[i - 1] %>"</p>
                            </div>
                        </div>
                        <% } %>
                </div>
            </div>
            <!-- /timeline -->

            <div class="text-end mt-5">
                <a href="javascript:void(0)" id="reset" class="btn btn-light text-uppercase fw-semibold me-2">Hủy</a>
                <a href="javascript:void(0)" class="btn btn-primary fw-semibold text-uppercase"
                    onclick="registerAction(this)">Đăng ký</a>
            </div>
        </form>
    </div>

</div>

<script>
    async function sendRecordingToCheck(formData, index) {
        const recordArea = $(`#record_area_${index}`);
        const audioArea = $(`#audio_area_${index}`);
        const audioResult = $(`input[name="audio_result_${index}"]`);

        const headers = {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Authorization': `Bearer ${accessToken}`,
        };
        let isValid;
        try {
            const res = await axios.post(API_URL2 + '/api/voicebio/enroll/add_file', formData, { headers });
            if (!res || !res.data) throw new Error('Lỗi ngoại lệ');
            const { status, is_valid } = res.data;
            if (status != 0) throw new Error('Lỗi ngoại lệ');

            isValid = (is_valid) ? true : false;
        } catch (err) {
            isValid = false;
        }


        // Đẩy kết quả check audio
        if (isValid) {
            audioResult.val(1);
            audioArea.find('.result_text').removeClass('text-danger').addClass('text-success').html('Ghi âm trùng khớp!');
            audioArea.find('.result_icon').removeClass('text-danger').addClass('text-success ph-check-circle');
        } else {
            audioResult.val(0);
            audioArea.find('.result_text').removeClass('text-success').addClass('text-danger').html('Ghi âm không trùng khớp!');
            audioArea.find('.result_icon').removeClass('text-success').addClass('text-danger ph-warning-circle');
        }

        recordArea.hide();
        audioArea.show();
    }

    function retryAction(index) {
        const recordArea = $(`#record_area_${index}`);
        const audioArea = $(`#audio_area_${index}`);
        const audioResult = $(`input[name="audio_result_${index}"]`);

        audioResult.val(0)
        recordArea.show();
        audioArea.hide();
    }

    const mediaRecorder = [];

    function startRecording(index) {
        const chunks = [];
        navigator.mediaDevices.getUserMedia({ audio: true })
            .then(stream => {
                mediaRecorder[index] = new MediaRecorder(stream);
                mediaRecorder[index].ondataavailable = function (event) {
                    chunks.push(event.data);
                }

                mediaRecorder[index].onstop = async function () {
                    const audioBlob = new Blob(chunks, { type: 'audio/wav' });
                    const audioURL = URL.createObjectURL(audioBlob);
                    $(`#audio_player_${index}`).attr('src', audioURL);

                    const formData = new FormData();
                    const user_code = $("input[name='customer_phone']").val();
                    formData.append('file', audioBlob);
                    formData.append('user_code', user_code);
                    formData.append('text', $(`input[name='text_input_${index}']`).val());

                    return sendRecordingToCheck(formData, index);
                }

                mediaRecorder[index].start();
            })
            .catch(error => {
                console.error('Error accessing microphone:', error);
                _componentNoty("Lỗi không xác định", "error");
            });
    }

    function stopRecording(index) {
        mediaRecorder[index].stop();
    }

    const recordAction = (ele) => {
        const index = $(ele).data('index');
        if ($("input[name='customer_name']").val() == '') {
            _componentNoty("Dữ liệu thông tin khách hàng bị thiếu", "error");
            return;
        }

        let isRecording = $(ele).hasClass("recording");
        if (!isRecording) {
            $(ele).addClass("recording bg-danger");
            startRecording(index);

        } else {
            $(ele).removeClass("recording bg-danger");
            stopRecording(index);
        }
    }

    const registerAction = async (ele) => {
        for (let i = 1; i <= listText.length; i++) {
            if ($(`input[name="audio_result_${i}"`).val() != 1) {
                _componentNoty("Yêu cầu xác thực đầy đủ thông tin ghi âm trước khi đăng ký", "error");
                return;
            }
        }

        try {
            const user_code = $("input[name='customer_phone']").val();
            const headers = {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Authorization': `Bearer ${accessToken}`,
            };

            const res = await axios.post(API_URL + '/api/voicebio/enroll/do_enroll', { user_code }, { headers });
            if (!res || !res.data) throw new Error('Lỗi ngoại lệ');
            const { status, msg } = res.data;
            if (status != 0) throw new Error('Lỗi ngoại lệ');

            _componentNoty(msg, "success");
            return;
        } catch (err) {
            _componentNoty("Có lỗi xảy ra khi đăng ký", "error");
            return;
        }
    }
</script>